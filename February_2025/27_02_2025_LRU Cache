//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// design the class in the most optimal way
class Node {
public:
    int key, value;
    Node* next;
    Node* prev;

    Node(int key, int value) {
        this->key = key;
        this->value = value;
        next = nullptr;
        prev = nullptr;
    }
};

class DLL {
public:
    Node* head;
    Node* tail;

    DLL() {
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head->next = tail;
        tail->prev = head;
    }

    void addToHead(Node* node) {
        node->prev = head;
        node->next = head->next;
        head->next->prev = node;
        head->next = node;
    }

    Node* removeFromTail() {
        Node* node = tail->prev;
        removeNode(node);
        return node;
    }

    void removeNode(Node* node) {
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }
};


class LRUCache {
  private:
    unordered_map<int, Node*> map;
    DLL* list;
    int capacity;

  public:
    // Constructor for initializing the cache capacity with the given value.
    LRUCache(int cap) {
        // code here
        capacity = cap;
        list = new DLL();
    }

    // Function to return value corresponding to the key.
    int get(int key) {
        // your code here
        if (map.find(key) == map.end()) return -1;

        Node* node = map[key];
        list->removeNode(node);
        list->addToHead(node);
        return node->value;
    }

    // Function for storing key-value pair.
    void put(int key, int value) {
        // your code here
        if (map.find(key) != map.end()) {
            Node* existingNode = map[key];
            list->removeNode(existingNode);
            map.erase(key);
        }

        if (map.size() == capacity) {
            Node* tailNode = list->removeFromTail();
            map.erase(tailNode->key);
        }

        Node* newNode = new Node(key, value);
        list->addToHead(newNode);
        map[key] = newNode;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        int capacity;
        cin >> capacity;
        LRUCache *cache = new LRUCache(capacity);

        int queries;
        cin >> queries;
        while (queries--) {
            string q;
            cin >> q;
            if (q == "PUT") {
                int key;
                cin >> key;
                int value;
                cin >> value;
                cache->put(key, value);
            } else {
                int key;
                cin >> key;
                cout << cache->get(key) << " ";
            }
        }
        cout << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends

// Question link -> https://www.geeksforgeeks.org/problems/lru-cache/1
// Video link -> https://youtu.be/z9bJUPxzFOw?si=Yh4-FYeYDXbxd5t4