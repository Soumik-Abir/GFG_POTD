// Approach 1

class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        // code here
        int n = nums.size();
        vector<long long int> left(n, 1), right(n, 1), ans(n, 1);

        // Left product array
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }

        // Right product array
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }

        // Answer array by multiplying left and right products
        for (int i = 0; i < n; i++) {
            ans[i] = left[i] * right[i];
        }

        return ans;
    }
};


// Approach 2

class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        // code here
        int n = nums.size();
        long long int totalProduct = 1;
        int zeroCount = 0;

        // Calculate the total product and count zeros
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                totalProduct *= nums[i];
            } else {
                zeroCount++;
            }
        }

        vector<long long int> ans(n, 0);

        for (int i = 0; i < n; i++) {
            if (zeroCount == 0) {
                // No zeros in the array, safe to divide
                ans[i] = totalProduct / nums[i];
            } else if (zeroCount == 1 && nums[i] == 0) {
                // Exactly one zero in the array, and nums[i] is that zero
                ans[i] = totalProduct;
            } else {
                // More than one zero or nums[i] is not zero when there's one zero
                ans[i] = 0;
            }
        }

        return ans;
    }
};


// Question link -> https://www.geeksforgeeks.org/problems/product-array-puzzle4525/1